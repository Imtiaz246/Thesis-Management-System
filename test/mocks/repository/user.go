// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/user.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Imtiaz246/Thesis-Management-System/internal/apis/v1"
	model "github.com/Imtiaz246/Thesis-Management-System/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CheckUserExistence mocks base method.
func (m *MockUserRepository) CheckUserExistence(ctx context.Context, universityId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistence", ctx, universityId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistence indicates an expected call of CheckUserExistence.
func (mr *MockUserRepositoryMockRecorder) CheckUserExistence(ctx, universityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistence", reflect.TypeOf((*MockUserRepository)(nil).CheckUserExistence), ctx, universityId)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), ctx, email)
}

// GetByUniversityId mocks base method.
func (m *MockUserRepository) GetByUniversityId(ctx context.Context, universityId string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUniversityId", ctx, universityId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUniversityId indicates an expected call of GetByUniversityId.
func (mr *MockUserRepositoryMockRecorder) GetByUniversityId(ctx, universityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUniversityId", reflect.TypeOf((*MockUserRepository)(nil).GetByUniversityId), ctx, universityId)
}

// ReqRegisterCache mocks base method.
func (m *MockUserRepository) ReqRegisterCache(ctx context.Context, token string, studentInfo *v1.StudentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqRegisterCache", ctx, token, studentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReqRegisterCache indicates an expected call of ReqRegisterCache.
func (mr *MockUserRepositoryMockRecorder) ReqRegisterCache(ctx, token, studentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqRegisterCache", reflect.TypeOf((*MockUserRepository)(nil).ReqRegisterCache), ctx, token, studentInfo)
}

// ReqRegisterCacheClear mocks base method.
func (m *MockUserRepository) ReqRegisterCacheClear(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqRegisterCacheClear", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReqRegisterCacheClear indicates an expected call of ReqRegisterCacheClear.
func (mr *MockUserRepositoryMockRecorder) ReqRegisterCacheClear(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqRegisterCacheClear", reflect.TypeOf((*MockUserRepository)(nil).ReqRegisterCacheClear), ctx, token)
}

// ReqRegisterCacheGet mocks base method.
func (m *MockUserRepository) ReqRegisterCacheGet(ctx context.Context, token string) (*v1.StudentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqRegisterCacheGet", ctx, token)
	ret0, _ := ret[0].(*v1.StudentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReqRegisterCacheGet indicates an expected call of ReqRegisterCacheGet.
func (mr *MockUserRepositoryMockRecorder) ReqRegisterCacheGet(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqRegisterCacheGet", reflect.TypeOf((*MockUserRepository)(nil).ReqRegisterCacheGet), ctx, token)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}
