// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/user/user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	v1 "github.com/Imtiaz246/Thesis-Management-System/internal/apis/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockService) GetProfile(ctx context.Context, userId, requesterId string) (*v1.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userId, requesterId)
	ret0, _ := ret[0].(*v1.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockServiceMockRecorder) GetProfile(ctx, userId, requesterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockService)(nil).GetProfile), ctx, userId, requesterId)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, req *v1.LoginRequest) (*v1.LoginResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*v1.LoginResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, req)
}

// Register mocks base method.
func (m *MockService) Register(ctx context.Context, req *v1.RegisterRequest, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(ctx, req, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, req, token)
}

// ReqRegister mocks base method.
func (m *MockService) ReqRegister(ctx context.Context, req *v1.ReqRegister) (*v1.StudentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReqRegister", ctx, req)
	ret0, _ := ret[0].(*v1.StudentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReqRegister indicates an expected call of ReqRegister.
func (mr *MockServiceMockRecorder) ReqRegister(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReqRegister", reflect.TypeOf((*MockService)(nil).ReqRegister), ctx, req)
}

// UpdateProfile mocks base method.
func (m *MockService) UpdateProfile(ctx context.Context, userId string, req *v1.UpdateProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockServiceMockRecorder) UpdateProfile(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockService)(nil).UpdateProfile), ctx, userId, req)
}

// VerifyEmail mocks base method.
func (m *MockService) VerifyEmail(ctx context.Context, token string) (*v1.StudentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, token)
	ret0, _ := ret[0].(*v1.StudentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockServiceMockRecorder) VerifyEmail(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockService)(nil).VerifyEmail), ctx, token)
}
